{"version":3,"file":"index-DenVxODa.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/hooks/useLocalStorage.js","../../src/constants.js","../../src/hooks/usePoints.js","../../src/components/HeaderBar.jsx","../../src/utils.js","../../src/components/Onboarding.jsx","../../src/components/Quiz.jsx","../../src/components/SquareButton.jsx","../../src/components/HomeScreen.jsx","../../src/components/TheoryModal.jsx","../../src/components/TheoryScreen.jsx","../../src/components/Modal.jsx","../../src/components/ResultReview.jsx","../../src/components/ResultsScreen.jsx","../../src/components/StatsScreen.jsx","../../src/components/TestsScreen.jsx","../../src/components/SettingsModal.jsx","../../src/api/fetchCsv.js","../../src/api/useSheetsData.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["/**\r\n * @license React\r\n * react-jsx-runtime.production.min.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\r\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\r\n","'use strict';\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\r\n} else {\r\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\r\n}\r\n","'use strict';\r\n\r\nvar m = require('react-dom');\r\nif (process.env.NODE_ENV === 'production') {\r\n  exports.createRoot = m.createRoot;\r\n  exports.hydrateRoot = m.hydrateRoot;\r\n} else {\r\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\r\n  exports.createRoot = function(c, o) {\r\n    i.usingClientEntryPoint = true;\r\n    try {\r\n      return m.createRoot(c, o);\r\n    } finally {\r\n      i.usingClientEntryPoint = false;\r\n    }\r\n  };\r\n  exports.hydrateRoot = function(c, h, o) {\r\n    i.usingClientEntryPoint = true;\r\n    try {\r\n      return m.hydrateRoot(c, h, o);\r\n    } finally {\r\n      i.usingClientEntryPoint = false;\r\n    }\r\n  };\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const raw = localStorage.getItem(key);\r\n      return raw ? JSON.parse(raw) : initialValue;\r\n    } catch {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    } catch {}\r\n  }, [key, value]);\r\n\r\n  return [value, setValue];\r\n}","export const SHEETS = {\r\n  classes: \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTd0EZNnDJV2Bf9OpeffMMDLzqyzEB_OZnXW-ePb4G60IhkmGUcHUadKPAny5IVzkfdIbF0GH9YiwHn/pub?gid=1460999158&single=true&output=csv\",\r\n  subjects: \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTd0EZNnDJV2Bf9OpeffMMDLzqyzEB_OZnXW-ePb4G60IhkmGUcHUadKPAny5IVzkfdIbF0GH9YiwHn/pub?gid=567850345&single=true&output=csv\",\r\n  lessons: \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTd0EZNnDJV2Bf9OpeffMMDLzqyzEB_OZnXW-ePb4G60IhkmGUcHUadKPAny5IVzkfdIbF0GH9YiwHn/pub?gid=1551143625&single=true&output=csv\",\r\n  questions: \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTd0EZNnDJV2Bf9OpeffMMDLzqyzEB_OZnXW-ePb4G60IhkmGUcHUadKPAny5IVzkfdIbF0GH9YiwHn/pub?gid=560252204&single=true&output=csv\",\r\n  theory: \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTd0EZNnDJV2Bf9OpeffMMDLzqyzEB_OZnXW-ePb4G60IhkmGUcHUadKPAny5IVzkfdIbF0GH9YiwHn/pub?gid=1818357835&single=true&output=csv\",\r\n};\r\n\r\nexport const STORAGE_KEYS = {\r\n  profile: \"math-app-profile\",\r\n  results: \"math-app-results\", \r\n  settings: \"math-app-settings\",\r\n  points: \"math-app-points\"\r\n};","import { useState, useEffect, useCallback } from 'react';\r\nimport useLocalStorage from './useLocalStorage';\r\nimport { STORAGE_KEYS } from '../constants';\r\n\r\nexport function usePoints() {\r\n  const [points, setPoints] = useLocalStorage(STORAGE_KEYS.points, 0);\r\n  \r\n  // Calculate level based on points\r\n  const level = Math.floor(points / 100) + 1;\r\n  \r\n  // Calculate progress to next level\r\n  const progressToNextLevel = points % 100;\r\n  const pointsToNextLevel = 100 - progressToNextLevel;\r\n  const progressPercentage = (progressToNextLevel / 100) * 100;\r\n  \r\n  // Add points function\r\n  const addPoints = useCallback((amount) => {\r\n    setPoints(prevPoints => prevPoints + amount);\r\n  }, [setPoints]);\r\n  \r\n  // Reset points function (for testing)\r\n  const resetPoints = useCallback(() => setPoints(0), [setPoints]);\r\n  \r\n  return {\r\n    points,\r\n    level,\r\n    progressToNextLevel,\r\n    pointsToNextLevel,\r\n    progressPercentage,\r\n    addPoints,\r\n    resetPoints\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { usePoints } from \"../hooks/usePoints\";\r\n\r\nexport default function HeaderBar({ title, profile, onHome, onLogout, onOpenSettings }) {\r\n  const { points, level } = usePoints();\r\n  \r\n  return (\r\n    <header className=\"bg-white border-b border-slate-200 px-4 py-3\">\r\n      <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={onHome}\r\n            className=\"text-slate-600 hover:text-slate-800 p-2 rounded-lg hover:bg-slate-100 transition-colors\"\r\n          >\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\r\n            </svg>\r\n          </button>\r\n          <h1 className=\"text-lg font-semibold text-slate-800\">{title}</h1>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-4\">\r\n          {/* Points Indicator */}\r\n          <div className=\"hidden sm:flex items-center gap-2 bg-slate-100 px-3 py-1 rounded-full text-sm\">\r\n            <span className=\"text-yellow-600\">⭐</span>\r\n            <span className=\"font-medium text-slate-700\">{points} т.</span>\r\n            <span className=\"text-slate-400\">|</span>\r\n            <span className=\"font-medium text-slate-700\">Ниво {level}</span>\r\n          </div>\r\n          \r\n          <button\r\n            onClick={onOpenSettings}\r\n            className=\"text-slate-600 hover:text-slate-800 p-2 rounded-lg hover:bg-slate-100 transition-colors\"\r\n          >\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n          </button>\r\n          <button\r\n            onClick={onLogout}\r\n            className=\"text-slate-600 hover:text-slate-800 p-2 rounded-lg hover:bg-slate-100 transition-colors\"\r\n          >\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}","export const normalizeId = (v) => (v == null ? null : String(v).trim());\r\n\r\nexport function groupBy(arr, keyFn) {\r\n  return arr.reduce((acc, x) => {\r\n    const k = keyFn(x);\r\n    (acc[k] = acc[k] || []).push(x);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport function routeTitle(route) {\r\n  switch (route) {\r\n    case \"home\":\r\n      return \"Начало\";\r\n    case \"theory\":\r\n      return \"Теория\";\r\n    case \"tests\":\r\n      return \"Тестове\";\r\n    case \"results\":\r\n      return \"Резултати\";\r\n    case \"stats\":\r\n      return \"Статистика\";\r\n    default:\r\n      return \"Math App\";\r\n  }\r\n}","import React, { useState } from \"react\";\r\nimport { normalizeId } from \"../utils\";\r\n\r\nexport default function Onboarding({ classes, onDone }){\r\n  const [name,setName] = useState(\"\"); const [classId,setClassId] = useState(\"\");\r\n  const canContinue = name.trim().length >= 2 && classId;\r\n  const handleContinue = () => onDone({ name: name.trim(), classId });\r\n  const handleNameChange = (e) => setName(e.target.value);\r\n  const handleClassChange = (e) => setClassId(e.target.value);\r\n  \r\n  return (<div className=\"min-h-screen bg-gradient-to-b from-white to-slate-50\">\r\n    <div className=\"mx-auto max-w-md px-4 py-10\">\r\n      <h1 className=\"text-2xl font-bold mb-2\">Добре дошъл! 🎓</h1>\r\n      <p className=\"text-slate-600 mb-6\">Нека те опознаем, за да ти подберем правилните тестове.</p>\r\n      <div className=\"space-y-4\">\r\n        <div><label className=\"block text-sm font-medium mb-1\">Име / прякор</label>\r\n          <input \r\n            className=\"w-full rounded-lg border border-slate-300 px-3 py-2\" \r\n            placeholder=\"напр. Алекс\" \r\n            value={name} \r\n            onChange={handleNameChange} \r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-sm font-medium text-slate-700 mb-2\">Клас</label>\r\n          <select \r\n            className=\"w-full rounded-lg border border-slate-300 px-3 py-2\" \r\n            value={classId} \r\n            onChange={handleClassChange}\r\n          >\r\n            <option value=\"\">Избери клас</option>\r\n            {classes.map((c) => {\r\n              const key = normalizeId(c.id) || c.name;\r\n              const value = normalizeId(c.id) || c.name;\r\n              const label = c.name || c.title || c.class || c.id;\r\n              return (\r\n                <option key={key} value={value}>\r\n                  {label}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <button \r\n         type=\"button\" \r\n         className=\"btn w-full\" \r\n         onClick={handleContinue} \r\n         disabled={!canContinue}\r\n       >\r\n         Продължи\r\n       </button>\r\n      </div>\r\n      <p className=\"text-xs text-slate-500 mt-6\">* Запазваме само име/прякор и клас на устройството ти.</p>\r\n    </div></div>);\r\n}","import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { usePoints } from \"../hooks/usePoints\";\r\n\r\nexport default function Quiz({ lesson, questions, onFinish, settings }){\r\n  const { addPoints, points, level } = usePoints();\r\n  const [index, setIndex] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [startTime, setStartTime] = useState(Date.now());\r\n  const [showExplanation, setShowExplanation] = useState(false);\r\n  const [explanationTimer, setExplanationTimer] = useState(null);\r\n  const timeoutRef = useRef(null);\r\n  const [showConfirm,setShowConfirm] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(settings?.timeLimitMin ? settings.timeLimitMin * 60 : 0);\r\n  const [adLeft, setAdLeft] = useState(0);\r\n  \r\n  const autoTimerRef = useRef(null);\r\n  const AD_SECONDS = 5;\r\n  \r\n  const qlist = useMemo(() => {\r\n    const base = [...questions];\r\n    if (settings?.shuffleQuestions) {\r\n      base.sort(() => Math.random() - 0.5);\r\n    }\r\n    return base.map(q => {\r\n      const options = [\r\n        { key: 'A', text: q.A ?? q.a },\r\n        { key: 'B', text: q.B ?? q.b },\r\n        { key: 'C', text: q.C ?? q.c },\r\n        { key: 'D', text: q.D ?? q.d }\r\n      ].filter(o => o.text != null && String(o.text).trim() !== '');\r\n      \r\n      const correctKey = String(q.correct || q.correct_option || q.answer || '').toUpperCase();\r\n      const correctText = { A: q.A, B: q.B, C: q.C, D: q.D }[correctKey];\r\n      const shuffled = settings?.shuffleOptions ? [...options].sort(() => Math.random() - 0.5) : options;\r\n      const newCorrectKey = (shuffled.find(o => o.text === correctText) || {}).key || correctKey;\r\n      \r\n      return { ...q, __options: shuffled, __correctKey: newCorrectKey };\r\n    });\r\n  }, [questions, settings?.shuffleQuestions, settings?.shuffleOptions]);\r\n  \r\n  const current = qlist[index];\r\n  const total = qlist.length;\r\n  const progress = total ? Math.round((index / total) * 100) : 0;\r\n  const isNearEnd = progress >= 80;\r\n  const isLastQuestion = index === total - 1;\r\n  \r\n  const options = useMemo(() => {\r\n    if (!current) return [];\r\n    const opts = [\r\n      { key: 'A', text: current.A || current.a },\r\n      { key: 'B', text: current.B || current.b },\r\n      { key: 'C', text: current.C || current.c },\r\n      { key: 'D', text: current.D || current.d }\r\n    ].filter(o => o.text != null && String(o.text).trim() !== '');\r\n    \r\n    const shuffled = settings?.shuffleOptions ? [...opts].sort(() => Math.random() - 0.5) : opts;\r\n    return shuffled;\r\n  }, [current, settings?.shuffleOptions]);\r\n\r\n  useEffect(() => {\r\n    if (autoTimerRef.current) {\r\n      clearTimeout(autoTimerRef.current);\r\n      autoTimerRef.current = null;\r\n    }\r\n  }, [index]);\r\n\r\n  useEffect(() => {\r\n    if (!settings?.timeLimitMin) return;\r\n    \r\n    if (timeLeft <= 0) {\r\n      submit();\r\n      return;\r\n    }\r\n    \r\n    const t = setTimeout(() => setTimeLeft(prev => prev - 1), 1000);\r\n    return () => clearTimeout(t);\r\n  }, [timeLeft, settings?.timeLimitMin]);\r\n\r\n  useEffect(() => {\r\n    if (!showConfirm) return;\r\n    \r\n    setAdLeft(AD_SECONDS);\r\n    const tick = setInterval(() => {\r\n      setAdLeft(s => {\r\n        if (s <= 1) {\r\n          clearInterval(tick);\r\n          return 0;\r\n        }\r\n        return s - 1;\r\n      });\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(tick);\r\n  }, [showConfirm]);\r\n\r\n  function choose(optKey) {\r\n    if (answers[current.id]) { return; }\r\n    \r\n    setAnswers(prev => ({ ...prev, [current.id]: optKey }));\r\n    \r\n    if (optKey === current.__correctKey) {\r\n      addPoints(10);\r\n    }\r\n    \r\n    if (settings?.showExplanation) {\r\n      setShowExplanation(true);\r\n      if (settings?.instantNext) {\r\n        const timer = setTimeout(() => next(), (settings?.instantDelaySec || 4) * 1000);\r\n        setExplanationTimer(timer);\r\n      }\r\n    } else {\r\n      setTimeout(next, 1000);\r\n    }\r\n  }\r\n  \r\n  function next() {\r\n    if (index < total - 1) {\r\n      setIndex(index + 1);\r\n      setShowExplanation(false);\r\n      if (explanationTimer) {\r\n        clearTimeout(explanationTimer);\r\n        setExplanationTimer(null);\r\n      }\r\n    } else {\r\n      setShowConfirm(true);\r\n    }\r\n  }\r\n\r\n  function computeScore(){ \r\n    let correct=0; \r\n    let wrong=0;\r\n    let unanswered=0;\r\n    \r\n    for(const q of qlist){ \r\n      if(answers[q.id]){\r\n        if((answers[q.id]||'').toUpperCase()===(q.__correctKey||'').toUpperCase()) {\r\n          correct++;\r\n        } else {\r\n          wrong++;\r\n        }\r\n      } else {\r\n        unanswered++;\r\n      }\r\n    } \r\n    return {correct, wrong, unanswered, total}; \r\n  }\r\n  function submit(){ \r\n    const {correct, wrong, unanswered, total} = computeScore(); \r\n    onFinish({ \r\n      lesson, \r\n      questions: qlist, // Include questions for review\r\n      correct, \r\n      total, \r\n      answers, \r\n      at: new Date().toISOString(), \r\n      timeLimitMin: settings?.timeLimitMin \r\n    }); \r\n  }\r\n  if (!current) return <div className=\"p-6 text-center\">Няма въпроси за този урок.</div>;\r\n\r\n  const opts = current.__options;\r\n  const hms = s => `${Math.floor(s/60)}:${String(s%60).padStart(2,'0')}`;\r\n  const chosen = answers[current.id];\r\n  const showExplain = settings?.showExplanation && chosen;\r\n  const isCorrect = chosen && chosen.toUpperCase() === current.__correctKey;\r\n  const adProgress = ((AD_SECONDS - adLeft) / AD_SECONDS) * 100;\r\n\r\n  const handleNext = () => {\r\n    setIndex(index + 1);\r\n    if (explanationTimer) {\r\n      clearTimeout(explanationTimer);\r\n      setExplanationTimer(null);\r\n    }\r\n    setShowExplanation(false);\r\n  };\r\n\r\n  const handleShowConfirm = () => setShowConfirm(true);\r\n  const handleHideConfirm = () => setShowConfirm(false);\r\n  \r\n  const handleFinishQuiz = () => {\r\n    const score = computeScore();\r\n    const correct = score.correct;\r\n    const wrong = score.wrong;\r\n    const unanswered = score.unanswered;\r\n    const total = score.total;\r\n    onFinish({ lesson, correct, wrong, unanswered, total, answers, at: new Date().toISOString(), timeLimitMin: settings?.timeLimitMin, qlist });\r\n  };\r\n\r\n  const handleDotClick = (i) => setIndex(i);\r\n  const handleAnswerClick = (optKey) => choose(optKey);\r\n  \r\n  const renderScoreSummary = () => {\r\n    const score = computeScore();\r\n    return (\r\n      <div className=\"space-y-2\">\r\n        <div className=\"grid grid-cols-2 gap-4 text-center\">\r\n          <div className=\"p-3 rounded-lg bg-green-50 border border-green-200\">\r\n            <div className=\"text-lg font-bold text-green-700\">{score.correct}</div>\r\n            <div className=\"text-xs text-green-600\">Правилни</div>\r\n          </div>\r\n          <div className=\"p-3 rounded-lg bg-red-50 border border-red-200\">\r\n            <div className=\"text-lg font-bold text-red-700\">{score.wrong}</div>\r\n            <div className=\"text-xs text-red-600\">Грешни</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center p-2 rounded-lg bg-slate-50 border border-slate-200\">\r\n          <div className=\"text-sm text-slate-600\">\r\n            Отговорени: <b>{score.correct + score.wrong}</b> · \r\n            Пропуснати: <b>{score.unanswered}</b> · \r\n            Общо: <b>{score.total}</b>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (<div className=\"max-w-3xl mx-auto p-4\">\r\n    {/* Points Indicator */}\r\n    <div className=\"mb-4 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-lg p-3 text-white text-center\">\r\n      <div className=\"flex items-center justify-center gap-4 text-sm\">\r\n        <span className=\"flex items-center gap-1\">\r\n          ⭐ <span className=\"font-semibold\">{points} т.</span>\r\n        </span>\r\n        <span className=\"text-white/80\">|</span>\r\n        <span className=\"font-semibold\">Ниво {level}</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div className=\"mb-4\">\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <div className=\"text-sm text-slate-600\">Урок: <span className=\"font-medium text-slate-800\">{lesson.title || lesson.name}</span></div>\r\n        <div className=\"flex items-center gap-4 text-sm text-slate-600\">\r\n          <div className=\"font-medium\">Въпрос {index + 1} от {total}</div>\r\n          {settings?.timeLimitMin ? (\r\n            <div className={`font-semibold ${timeLeft <= 10 ? 'text-red-600' : ''}`}>\r\n              {hms(timeLeft)}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Enhanced Progress Bar */}\r\n      <div className=\"relative\">\r\n        <div className=\"progress h-3 bg-slate-200 rounded-full overflow-hidden\">\r\n          <div \r\n            className={`h-full transition-all duration-300 ease-out ${\r\n              isNearEnd ? 'bg-orange-500' : 'bg-blue-500'\r\n            } ${isLastQuestion ? 'bg-green-500' : ''}`}\r\n            style={{width: `${progress}%`}}\r\n          />\r\n        </div>\r\n        {/* Progress Label */}\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          <span className=\"text-xs font-medium text-white drop-shadow-sm\">\r\n            {progress}%\r\n          </span>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Progress Text */}\r\n      <div className=\"text-center mt-2\">\r\n        <span className=\"text-sm text-slate-600\">\r\n          {index === 0 ? 'Започваме!' : \r\n           isLastQuestion ? 'Последен въпрос!' : \r\n           `Остават ${total - index - 1} въпроса`}\r\n        </span>\r\n      </div>\r\n      \r\n      {/* Question Progress Indicator */}\r\n      <div className=\"flex justify-center mt-2\">\r\n        <div className=\"flex space-x-1\">\r\n          {Array.from({ length: total }, (unused, i) => {\r\n            const isAnswered = answers[qlist[i]?.id];\r\n            const isCurrent = i === index;\r\n            const dotClasses = `w-3 h-3 rounded-full transition-all ${\r\n              isCurrent ? 'bg-blue-600 scale-125' : \r\n              isAnswered ? 'bg-green-500' : 'bg-slate-300 hover:bg-slate-400'\r\n            }`;\r\n            \r\n            const dotTitle = `Въпрос ${i + 1}${isAnswered ? ' - Отговорен' : ''}`;\r\n            \r\n            const handleClick = () => handleDotClick(i);\r\n            return (\r\n              <button\r\n                key={i}\r\n                className={dotClasses}\r\n                title={dotTitle}\r\n                onClick={handleClick}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div className=\"card mb-4\"><div className=\"card-content\">\r\n      <div className=\"text-lg font-medium mb-4\">{current.text || current.question || current.title}</div>\r\n      {current.image ? <img src={current.image} alt=\"Илюстрация\" className=\"mb-4 rounded-lg border\" /> : null}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n        {opts.map(o => {\r\n          const buttonClasses = `btn h-auto py-3 text-left transition-all ${\r\n            chosen === o.key \r\n              ? (isCorrect ? 'bg-green-100 border-green-300 text-green-800' : 'btn-danger') \r\n              : 'hover:bg-slate-50'\r\n          } ${answers[current.id] ? 'cursor-default' : ''}`;\r\n          \r\n          const handleClick = () => handleAnswerClick(o.key);\r\n          \r\n          return (\r\n            <button \r\n              type=\"button\" \r\n              key={o.key} \r\n              className={buttonClasses}\r\n              onClick={handleClick}\r\n              disabled={answers[current.id] !== undefined}\r\n            >\r\n              <span className=\"font-semibold w-6 inline-block\">{o.key}.</span>\r\n              <span className=\"ml-2\">{o.text}</span>\r\n              {chosen === o.key && (\r\n                <span className=\"ml-2 text-sm\">\r\n                  {isCorrect ? '✓' : '✗'}\r\n                </span>\r\n              )}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      {showExplain ? (\r\n        <div className={`mt-4 text-sm ${isCorrect ? \"text-green-700\" : \"text-red-700\"}`}>\r\n          {isCorrect ? \"Вярно! \" : \"Грешно. \"}\r\n          <span className=\"text-slate-700\">Обяснение: {current.explanation || \"—\"}</span>\r\n        </div>\r\n      ) : null}\r\n    </div></div>\r\n    <div className=\"flex items-center justify-between\">\r\n      {index < total - 1 ? (\r\n        <button type=\"button\" className=\"btn\" onClick={handleNext}>\r\n          Следващ въпрос\r\n        </button>\r\n      ) : (\r\n        <button type=\"button\" className=\"btn\" onClick={handleShowConfirm}>\r\n          Приключи\r\n        </button>\r\n      )}\r\n      <div className=\"text-sm text-slate-500\">\r\n        Избран отговор: <span className=\"font-medium\">{answers[current.id] || \"—\"}</span>\r\n      </div>\r\n    </div>\r\n    {showConfirm && (\r\n      <div className=\"modal-backdrop\" onClick={handleHideConfirm}>\r\n        <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n          <div className=\"mb-2 font-semibold text-lg\">Готов ли си да предадеш теста?</div>\r\n          <div className=\"text-xs text-slate-500 mb-2\">Провери обобщението по-долу и натисни „Предай\".</div>\r\n          <div className=\"mb-3 p-3 rounded-lg border bg-slate-50 text-sm\">Място за реклама или банер</div>\r\n          <div className=\"mb-2 text-xs text-slate-500\">Рекламна пауза: остава {adLeft} сек.</div>\r\n          <div className=\"progress mb-3\">\r\n            <div style={{width: `${adProgress}%`}}/>\r\n          </div>\r\n          <div className=\"mt-1 mb-4 text-sm text-slate-700\">\r\n            {renderScoreSummary()}\r\n          </div>\r\n          <div className=\"flex justify-end gap-2\">\r\n            <button type=\"button\" className=\"btn\" onClick={handleFinishQuiz}>\r\n              Предай\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </div>);\r\n}","import React from \"react\";\r\n\r\nconst SquareButton = ({ label, onClick, icon = \"🔹\" }) => {\r\n  if (!onClick) {\r\n    console.warn('SquareButton: onClick prop is required');\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <button \r\n      type=\"button\" \r\n      onClick={onClick} \r\n      className=\"square group flex flex-col items-center justify-center rounded-2xl border bg-white p-6 shadow-sm hover:shadow-md transition w-full\"\r\n    >\r\n      <div className=\"text-3xl mb-2\">{icon}</div>\r\n      <span className=\"text-sm font-medium\">{label}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SquareButton;","import React from \"react\";\r\nimport SquareButton from './SquareButton';\r\nimport { usePoints } from '../hooks/usePoints';\r\n\r\nexport default function HomeScreen({ onGo, profile }){\r\n  const { points, level } = usePoints();\r\n  \r\n  // Debug logging\r\n  console.log('HomeScreen render:', { onGo, profile, SquareButton: typeof SquareButton });\r\n  \r\n  if (typeof onGo !== 'function') {\r\n    console.error('HomeScreen: onGo prop is not a function:', onGo);\r\n    return <div>Error: Invalid navigation function</div>;\r\n  }\r\n  \r\n  if (typeof SquareButton !== 'function') {\r\n    console.error('HomeScreen: SquareButton is not a function:', SquareButton);\r\n    return <div>Error: SquareButton component not available</div>;\r\n  }\r\n\r\n  const tiles = [\r\n    { key: \"theory\", icon: \"📖\", label: \"Теория\" },\r\n    { key: \"tests\", icon: \"✏️\", label: \"Тестове\" },\r\n    { key: \"results\", icon: \"📊\", label: \"Резултати\" },\r\n    { key: \"stats\", icon: \"📈\", label: \"Статистики\" }\r\n  ];\r\n\r\n  const handleTileClick = (key) => onGo(key);\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <div className=\"max-w-4xl mx-auto p-4 sm:p-6\">\r\n        {/* Profile and Points Section */}\r\n        <div className=\"mb-8 bg-white rounded-xl p-6 shadow-sm\">\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n            <div>\r\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 mb-2\">\r\n                Здравей, {profile?.name || 'Ученик'} · Клас {profile?.classId || '?'}\r\n              </h1>\r\n              <div className=\"flex items-center gap-3 text-lg text-slate-600\">\r\n                <span className=\"flex items-center gap-2\">\r\n                  ⭐ {points} т.\r\n                </span>\r\n                <span className=\"text-slate-400\">|</span>\r\n                <span>Ниво {level}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-shrink-0\">\r\n              <div className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-4 py-2 rounded-full font-semibold text-center\">\r\n                <div className=\"text-sm\">Ниво</div>\r\n                <div className=\"text-xl\">{level}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Navigation Tiles */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n          {tiles.map(t => {\r\n            const handleClick = () => handleTileClick(t.key);\r\n            return (\r\n              <SquareButton key={t.key} icon={t.icon} label={t.label} onClick={handleClick} />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nexport default function TheoryModal({ isOpen, onClose, theoryItem, onStartTest, lesson }) {\r\n  if (!isOpen || !theoryItem) return null;\r\n\r\n  const handleStartTest = () => {\r\n    if (onStartQuiz && lesson) {\r\n      onStartQuiz(lesson, questions);\r\n    }\r\n  };\r\n\r\n  const handleStartTestAndClose = () => {\r\n    onStartTest(lesson);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-2xl\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200\">\r\n          <h2 className=\"text-2xl font-bold text-slate-800\">{theoryItem.title}</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-slate-400 hover:text-slate-600 text-2xl font-bold p-2 hover:bg-slate-100 rounded-lg transition-colors\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-140px)]\">\r\n          {/* Image */}\r\n          {theoryItem.image && (\r\n            <div className=\"mb-6 text-center\">\r\n              <img\r\n                src={theoryItem.image}\r\n                alt={theoryItem.title}\r\n                className=\"max-w-full max-h-64 object-contain rounded-lg border shadow-sm\"\r\n                onError={(e) => {\r\n                  e.target.style.display = 'none';\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* Theory Content */}\r\n          <div className=\"prose prose-slate max-w-none mb-6\">\r\n            <div className=\"whitespace-pre-wrap text-slate-700 leading-relaxed text-base\">\r\n              {theoryItem.content}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Metadata */}\r\n          <div className=\"flex items-center gap-3 pt-4 border-t border-slate-200\">\r\n            {theoryItem.classId && (\r\n              <span className=\"bg-slate-100 text-slate-700 px-3 py-1 rounded-full text-sm font-medium\">\r\n                Клас {theoryItem.classId}\r\n              </span>\r\n            )}\r\n            {theoryItem.lessonId && (\r\n              <span className=\"bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-medium\">\r\n                Урок {theoryItem.lessonId}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer with Start Test Button */}\r\n        <div className=\"flex items-center justify-between p-6 border-t border-slate-200 bg-slate-50\">\r\n          <div className=\"text-sm text-slate-600\">\r\n            Готови ли сте да тествате знанията си?\r\n          </div>\r\n          <div className=\"flex gap-3\">\r\n            <button\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-slate-600 border border-slate-300 rounded-lg hover:bg-slate-100 transition-colors\"\r\n            >\r\n              Затвори\r\n            </button>\r\n            <button\r\n              onClick={handleStartTestAndClose}\r\n              className=\"px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors\"\r\n            >\r\n              Започни тест\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback } from \"react\";\r\nimport { normalizeId } from \"../utils\";\r\nimport TheoryModal from \"./TheoryModal\";\r\n\r\n// Simple hook to get URL parameters\r\nfunction useURLParams() {\r\n  const [params, setParams] = useState(new URLSearchParams(window.location.search));\r\n  \r\n  const updateParams = useCallback((newParams) => {\r\n    const search = newParams.toString();\r\n    const newURL = search ? `${window.location.pathname}?${search}` : window.location.pathname;\r\n    window.history.pushState({}, '', newURL);\r\n    setParams(newParams);\r\n  }, []);\r\n  \r\n  return [params, updateParams];\r\n}\r\n\r\nexport default function TheoryScreen(props) {\r\n  const { \r\n    profile, \r\n    theory = [], \r\n    classes = [], \r\n    lessons = [], \r\n    questions = [], \r\n    onStartQuiz \r\n  } = props;\r\n  console.log('TheoryScreen render - theory data:', theory);\r\n  console.log('TheoryScreen render - theory length:', theory?.length);\r\n  console.log('TheoryScreen render - profile:', profile);\r\n  \r\n  const [searchParams, setSearchParams] = useURLParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Get URL parameters\r\n  const urlClassId = searchParams.get('class');\r\n  const urlLessonId = searchParams.get('lesson');\r\n  \r\n  // Local state\r\n  const [activeClassId, setActiveClassId] = useState(profile?.classId ? Number(profile.classId) : null);\r\n  const [activeLessonId, setActiveLessonId] = useState(urlLessonId || '');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');\r\n  \r\n  // Modal state\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [selectedTheoryItem, setSelectedTheoryItem] = useState(null);\r\n  const [selectedLesson, setSelectedLesson] = useState(null);\r\n\r\n  // Debounce search input\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setDebouncedSearchQuery(searchQuery), 250);\r\n    return () => clearTimeout(timer);\r\n  }, [searchQuery]);\r\n\r\n  // Update URL when filters change\r\n  useEffect(() => {\r\n    const params = new URLSearchParams();\r\n    if (activeClassId) params.set('class', activeClassId.toString());\r\n    if (activeLessonId) params.set('lesson', activeLessonId);\r\n    setSearchParams(params);\r\n  }, [activeClassId, activeLessonId, setSearchParams]);\r\n\r\n  // Filter theory items based on current filters\r\n  const filteredTheory = useMemo(() => {\r\n    let filtered = theory;\r\n    \r\n    if (activeClassId) {\r\n      filtered = filtered.filter(item => item.classId === activeClassId);\r\n    }\r\n    \r\n    if (activeLessonId) {\r\n      filtered = filtered.filter(item => item.lessonId === activeLessonId);\r\n    }\r\n    \r\n    if (searchQuery.trim()) {\r\n      const query = searchQuery.toLowerCase();\r\n      filtered = filtered.filter(item => \r\n        item.title.toLowerCase().includes(query) || \r\n        item.content.toLowerCase().includes(query)\r\n      );\r\n    }\r\n    \r\n    return filtered;\r\n  }, [theory, activeClassId, activeLessonId, searchQuery]);\r\n  \r\n  const availableClasses = useMemo(() => {\r\n    const classIds = [...new Set(theory.map(item => item.classId).filter(Boolean))];\r\n    return classIds.map(classId => {\r\n      const classInfo = classes.find(c => normalizeId(c.id) === classId.toString() || c.id === classId);\r\n      const name = classInfo?.name || classInfo?.title || `Клас ${classId}`;\r\n      return { id: classId, name };\r\n    }).sort((a, b) => a.id - b.id);\r\n  }, [theory, classes]);\r\n  \r\n  const availableLessons = useMemo(() => {\r\n    if (!activeClassId) return [];\r\n    \r\n    const lessonIds = [...new Set(\r\n      theory\r\n        .filter(item => item.classId === activeClassId && item.lessonId)\r\n        .map(item => item.lessonId)\r\n    )];\r\n    \r\n    return lessonIds.map(lessonId => {\r\n      const lessonInfo = lessons.find(l => normalizeId(l.id) === lessonId);\r\n      const name = lessonInfo?.title || lessonInfo?.name || `Урок ${lessonId}`;\r\n      return { id: lessonId, name };\r\n    }).sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [theory, lessons, activeClassId]);\r\n\r\n  const handleClassChange = (classId) => {\r\n    setActiveClassId(classId);\r\n    setActiveLessonId(null);\r\n    setSelectedTheoryItem(null);\r\n  };\r\n  \r\n  const handleLessonChange = (lessonId) => {\r\n    setActiveLessonId(lessonId);\r\n    setSelectedTheoryItem(null);\r\n  };\r\n  \r\n  const handleSearchChange = (e) => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  // Handle theory item click\r\n  const handleTheoryClick = useCallback((theoryItem) => {\r\n    // Find the corresponding lesson for this theory item\r\n    const lesson = lessons.find(l => normalizeId(l.id) === theoryItem.lessonId);\r\n    setSelectedTheoryItem(theoryItem);\r\n    setSelectedLesson(lesson);\r\n    setModalOpen(true);\r\n  }, [lessons]);\r\n\r\n  // Handle start test\r\n  const handleStartTest = useCallback((lesson) => {\r\n    if (lesson && onStartQuiz) {\r\n      // Find questions for this lesson\r\n      const lessonQuestions = questions.filter(q => {\r\n        const questionLessonId = q.lesson_id || q.lessonId;\r\n        const lessonId = lesson.id || lesson.lesson_id;\r\n        return normalizeId(questionLessonId) === normalizeId(lessonId);\r\n      });\r\n      \r\n      if (lessonQuestions.length > 0) {\r\n        console.log('Starting test for lesson:', lesson, 'with', lessonQuestions.length, 'questions');\r\n        onStartQuiz(lesson, lessonQuestions);\r\n      } else {\r\n        console.warn('No questions found for lesson:', lesson);\r\n        // You could show a toast or alert here\r\n      }\r\n    }\r\n  }, [onStartQuiz, questions]);\r\n\r\n  const handleGoToOnboarding = () => window.location.href = '/onboarding';\r\n  const handleReload = () => window.location.reload();\r\n  const handleClearClassFilter = () => setActiveClassId(null);\r\n  const handleTheoryItemClick = (item) => handleTheoryClick(item);\r\n  const handleClassSelectChange = (e) => handleClassChange(e.target.value);\r\n  const handleLessonSelectChange = (e) => handleLessonChange(e.target.value);\r\n  const handleCloseModal = () => setModalOpen(false);\r\n\r\n  // If no profile, show prompt\r\n  if (!profile) {\r\n    return (\r\n      <div className=\"min-h-screen bg-slate-50\">\r\n        <div className=\"max-w-4xl mx-auto p-4 sm:p-6\">\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">👤</div>\r\n            <h2 className=\"text-2xl font-semibold mb-4 text-slate-800\">Профилът е задължителен</h2>\r\n            <p className=\"text-slate-600 mb-6 text-lg\">\r\n              Моля, въведете профил/клас в настройките за да видите теорията\r\n            </p>\r\n            <button \r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n              onClick={handleGoToOnboarding}\r\n            >\r\n              Въведи профил\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If theory data is not loaded yet, show loading\r\n  if (!theory || theory.length === 0) {\r\n    return (\r\n      <div className=\"min-h-screen bg-slate-50\">\r\n        <div className=\"max-w-4xl mx-auto p-4 sm:p-6\">\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">⏳</div>\r\n            <h2 className=\"text-2xl font-semibold mb-4 text-slate-800\">Зареждаме теорията</h2>\r\n            <div className=\"animate-pulse text-lg text-slate-600 mb-4\">Моля, изчакайте...</div>\r\n            <p className=\"text-sm text-slate-500\">\r\n              Ако зареждането продължава дълго, може да има проблем с достъпа до данните.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-slate-50\">\r\n        <div className=\"max-w-4xl mx-auto p-4 sm:p-6\">\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">❌</div>\r\n            <h2 className=\"text-2xl font-semibold mb-4 text-slate-800\">Възникна грешка</h2>\r\n            <div className=\"text-red-600 mb-6 p-4 bg-red-50 rounded-lg border border-red-200\">\r\n              {error}\r\n            </div>\r\n            <button \r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n              onClick={handleReload}\r\n            >\r\n              Опитай отново\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <div className=\"max-w-6xl mx-auto p-4 sm:p-6\">\r\n        {/* Header */}\r\n        <div className=\"mb-6 bg-white rounded-xl p-6 shadow-sm\">\r\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 mb-6\">Теория</h1>\r\n          \r\n          {/* Filters */}\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {/* Class Selector */}\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium text-slate-700\">Клас</label>\r\n              <select\r\n                value={activeClassId || ''}\r\n                onChange={handleClassSelectChange}\r\n                className=\"w-full border border-slate-300 rounded-lg px-3 py-2 bg-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n              >\r\n                <option value=\"\">Всички класове</option>\r\n                {availableClasses.map(cls => (\r\n                  <option key={cls.id} value={cls.id}>\r\n                    {cls.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Lesson Selector */}\r\n            {activeClassId && availableLessons.length > 0 && (\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium text-slate-700\">Урок</label>\r\n                <select\r\n                  value={activeLessonId}\r\n                  onChange={handleLessonSelectChange}\r\n                  className=\"w-full border border-slate-300 rounded-lg px-3 py-2 bg-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                >\r\n                  <option value=\"all\">Всички уроци</option>\r\n                  {availableLessons.map(lesson => (\r\n                    <option key={lesson.id} value={lesson.id}>\r\n                      {lesson.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n\r\n            {/* Search Input */}\r\n            <div className={`space-y-2 ${activeClassId && availableLessons.length > 0 ? 'sm:col-span-2' : 'sm:col-span-3'}`}>\r\n              <label className=\"text-sm font-medium text-slate-700\">Търсене</label>\r\n              <input\r\n                type=\"text\"\r\n                value={searchQuery}\r\n                onChange={handleSearchChange}\r\n                placeholder=\"Търси в заглавие и съдържание...\"\r\n                className=\"w-full border border-slate-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        {filteredTheory.length === 0 ? (\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">📚</div>\r\n            <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Няма налична теория</h3>\r\n            <p className=\"text-slate-600 mb-4\">\r\n              {activeClassId ? \r\n                `Няма налична теория за клас ${activeClassId}. Опитайте да промените филтъра за клас или да използвате търсенето.`\r\n                : 'Няма налична теория за избрания филтър.'\r\n              }\r\n            </p>\r\n            {activeClassId && (\r\n              <div className=\"mt-4\">\r\n                <button\r\n                  onClick={handleClearClassFilter}\r\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-colors\"\r\n                >\r\n                  Покажи всички класове\r\n                </button>\r\n              </div>\r\n            )}\r\n            {theory.length > 0 && (\r\n              <div className=\"mt-4 text-sm text-slate-500\">\r\n                <p>Налична теория за класове: {[...new Set(theory.map(item => item.classId))].sort().join(', ')}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-white rounded-xl shadow-sm\">\r\n            <div className=\"p-6 border-b border-slate-200\">\r\n              <h2 className=\"text-xl font-semibold text-slate-800 flex items-center gap-2\">\r\n                <span>📖</span>\r\n                Уроци с теория ({filteredTheory.length})\r\n              </h2>\r\n            </div>\r\n            \r\n            <div className=\"divide-y divide-slate-200\">\r\n              {filteredTheory.map(item => {\r\n                const handleClick = () => handleTheoryItemClick(item);\r\n                return (\r\n                  <div\r\n                    key={item.id}\r\n                    className=\"p-6 hover:bg-slate-50 cursor-pointer transition-colors\"\r\n                    onClick={handleClick}\r\n                  >\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"text-lg font-semibold text-slate-800 mb-3\">\r\n                          {item.title}\r\n                        </h3>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {item.classId && (\r\n                            <span className=\"bg-slate-100 text-slate-700 px-2 py-1 rounded-full text-xs font-medium\">\r\n                              Клас {item.classId}\r\n                            </span>\r\n                          )}\r\n                          {item.lessonId && (\r\n                            <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\r\n                              Урок {item.lessonId}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ml-4 text-slate-400\">\r\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n                        </svg>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Theory Modal */}\r\n      <TheoryModal\r\n        isOpen={modalOpen}\r\n        onClose={handleCloseModal}\r\n        theoryItem={selectedTheoryItem}\r\n        lesson={selectedLesson}\r\n        onStartTest={handleStartTest}\r\n      />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nexport default function Modal({ \r\n  isOpen, \r\n  onClose, \r\n  title, \r\n  children, \r\n  size = 'md',\r\n  showCloseButton = true \r\n}) {\r\n  const modalRef = useRef(null);\r\n  const previousFocusRef = useRef(null);\r\n\r\n  // Handle ESC key\r\n  useEffect(() => {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape' && isOpen) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEscape);\r\n      // Store previous focus\r\n      previousFocusRef.current = document.activeElement;\r\n      // Focus the modal\r\n      if (modalRef.current) {\r\n        modalRef.current.focus();\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      // Restore previous focus\r\n      if (previousFocusRef.current) {\r\n        previousFocusRef.current.focus();\r\n      }\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  // Prevent body scroll when modal is open\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = 'unset';\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.overflow = 'unset';\r\n    };\r\n  }, [isOpen]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const sizeClasses = {\r\n    sm: 'max-w-md',\r\n    md: 'max-w-2xl',\r\n    lg: 'max-w-4xl',\r\n    xl: 'max-w-6xl'\r\n  };\r\n\r\n  return createPortal(\r\n    <div \r\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\r\n      onClick={onClose}\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n      aria-labelledby=\"modal-title\"\r\n    >\r\n      <div \r\n        ref={modalRef}\r\n        className={`bg-white rounded-xl shadow-2xl w-full ${sizeClasses[size]} max-h-[90vh] overflow-hidden`}\r\n        onClick={(e) => e.stopPropagation()}\r\n        tabIndex={-1}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200\">\r\n          <h2 id=\"modal-title\" className=\"text-xl font-semibold text-slate-800\">\r\n            {title}\r\n          </h2>\r\n          {showCloseButton && (\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-slate-400 hover:text-slate-600 text-2xl font-bold p-2 hover:bg-slate-100 rounded-lg transition-colors\"\r\n              aria-label=\"Затвори модал\"\r\n            >\r\n              ×\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"overflow-y-auto max-h-[calc(90vh-140px)]\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ResultReview({ result, onRetakeTest }) {\r\n  if (!result) return null;\r\n\r\n  const lesson = result.lesson;\r\n  const correct = result.correct;\r\n  const total = result.total;\r\n  const answers = result.answers;\r\n  const at = result.at;\r\n  const questions = result.questions;\r\n  const percentage = Math.round((correct / total) * 100);\r\n  const date = new Date(at).toLocaleDateString('bg-BG', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n\r\n  // Debug logging\r\n  console.log('ResultReview render:', { \r\n    result, \r\n    questions: result.questions, \r\n    questionsType: typeof result.questions,\r\n    questionsLength: result.questions?.length,\r\n    answers,\r\n    hasQuestions \r\n  });\r\n\r\n  // Helper function to get option text\r\n  const getOptionText = (question, optionKey) => {\r\n    const optionMap = {\r\n      'A': question.A || question.a,\r\n      'B': question.B || question.b,\r\n      'C': question.C || question.c,\r\n      'D': question.D || question.d\r\n    };\r\n    return optionMap[optionKey] || '';\r\n  };\r\n\r\n  // Helper function to check if option is correct\r\n  const isCorrectOption = (question, optionKey) => {\r\n    const correctKey = String(question.correct || question.correct_option || question.answer || '').toUpperCase();\r\n    return optionKey === correctKey;\r\n  };\r\n\r\n  // Helper function to check if option was selected\r\n  const wasSelected = (questionId, optionKey) => {\r\n    return answers[questionId] === optionKey;\r\n  };\r\n\r\n  // Helper function to get question options\r\n  const getQuestionOptions = (question) => {\r\n    const options = [];\r\n    ['A', 'B', 'C', 'D'].forEach(key => {\r\n      const text = getOptionText(question, key);\r\n      if (text && text.trim() !== '') {\r\n        options.push({ key, text });\r\n      }\r\n    });\r\n    return options;\r\n  };\r\n\r\n  // Check if we have questions data\r\n  const hasQuestions = questions && Array.isArray(questions) && questions.length > 0;\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      {/* Header with Score */}\r\n      <div className=\"mb-6 text-center\" aria-live=\"polite\">\r\n        <h3 className=\"text-2xl font-bold text-slate-800 mb-2\">\r\n          {lesson?.title || lesson?.name || 'Урок'}\r\n        </h3>\r\n        <p className=\"text-slate-600 mb-4\">{date}</p>\r\n        <div className=\"inline-flex items-center gap-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-full\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{correct}</div>\r\n            <div className=\"text-sm opacity-90\">Правилни</div>\r\n          </div>\r\n          <div className=\"text-white/60\">|</div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{total}</div>\r\n            <div className=\"text-sm opacity-90\">Общо</div>\r\n          </div>\r\n          <div className=\"text-white/60\">|</div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{percentage}%</div>\r\n            <div className=\"text-sm opacity-90\">Резултат</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Questions Review */}\r\n      <div className=\"space-y-6\">\r\n        <h4 className=\"text-lg font-semibold text-slate-800 mb-4\">Преглед на въпросите</h4>\r\n        \r\n        {!hasQuestions ? (\r\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center\">\r\n            <div className=\"text-yellow-800\">\r\n              <p className=\"font-medium mb-2\">Въпросите не са налични за преглед</p>\r\n              <p className=\"text-sm\">Това може да се дължи на по-стара версия на приложението</p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <ul className=\"space-y-6 max-h-[60vh] overflow-y-auto\">\r\n            {questions.map((question, index) => {\r\n              const options = getQuestionOptions(question);\r\n              const selectedAnswer = answers[question.id];\r\n              const correctAnswer = String(question.correct || question.correct_option || question.answer || '').toUpperCase();\r\n              \r\n              return (\r\n                <li key={question.id || index} className=\"bg-slate-50 rounded-lg p-4\">\r\n                  {/* Question */}\r\n                  <div className=\"mb-4\">\r\n                    <h5 className=\"font-semibold text-slate-800 mb-2\">\r\n                      Въпрос {index + 1}: {question.text || question.question || question.title}\r\n                    </h5>\r\n                    {question.image && (\r\n                      <img \r\n                        src={question.image} \r\n                        alt=\"Илюстрация\" \r\n                        className=\"max-w-full max-h-48 object-contain rounded-lg border mb-3\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Options */}\r\n                  <div className=\"space-y-2 mb-4\">\r\n                    {options.map((option) => {\r\n                      const isCorrect = isCorrectOption(question, option.key);\r\n                      const isSelected = wasSelected(question.id, option.key);\r\n                      const isCorrectAnswer = option.key === correctAnswer;\r\n                      \r\n                      let optionClasses = \"p-3 rounded-lg border text-left transition-all\";\r\n                      \r\n                      if (isCorrectAnswer) {\r\n                        // Correct answer - always green\r\n                        optionClasses += \" bg-green-50 border-green-300 text-green-800\";\r\n                      } else if (isSelected && !isCorrectAnswer) {\r\n                        // Selected but wrong - red\r\n                        optionClasses += \" bg-red-50 border-red-300 text-red-800\";\r\n                      } else if (isSelected && isCorrectAnswer) {\r\n                        // Selected and correct - green\r\n                        optionClasses += \" bg-green-100 border-green-400 text-green-900\";\r\n                      } else {\r\n                        // Not selected - neutral\r\n                        optionClasses += \" bg-white border-slate-200 text-slate-700\";\r\n                      }\r\n\r\n                      return (\r\n                        <div key={option.key} className={optionClasses}>\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <span className=\"font-semibold w-6 text-center\">{option.key}.</span>\r\n                            <span className=\"flex-1\">{option.text}</span>\r\n                            {isCorrectAnswer && (\r\n                              <span className=\"text-green-600 font-bold\">✓</span>\r\n                            )}\r\n                            {isSelected && !isCorrectAnswer && (\r\n                              <span className=\"text-red-600 font-bold\">✗</span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n\r\n                  {/* Explanation */}\r\n                  {question.explanation && (\r\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\r\n                      <div className=\"text-sm text-blue-800\">\r\n                        <strong>Обяснение:</strong> {question.explanation}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Result Summary for this question */}\r\n                  <div className=\"mt-3 text-sm\">\r\n                    {selectedAnswer ? (\r\n                      wasSelected(question.id, correctAnswer) ? (\r\n                        <span className=\"text-green-600 font-medium\">✓ Правилен отговор</span>\r\n                      ) : (\r\n                        <span className=\"text-red-600 font-medium\">✗ Грешен отговор</span>\r\n                      )\r\n                    ) : (\r\n                      <span className=\"text-slate-500\">Пропуснат въпрос</span>\r\n                    )}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      {/* Footer with Actions */}\r\n      <div className=\"mt-8 pt-6 border-t border-slate-200 flex justify-end gap-3\">\r\n        <button\r\n          onClick={onRetakeTest}\r\n          className=\"px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors\"\r\n        >\r\n          Направи теста отново\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport ResultReview from \"./ResultReview\";\r\n\r\nexport default function ResultsScreen(props) {\r\n  const { \r\n    results = [], \r\n    classes = [], \r\n    lessons = [], \r\n    canRestart = false, \r\n    onRestart \r\n  } = props;\r\n  const [activeResult, setActiveResult] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const handleResultClick = (result) => {\r\n    setActiveResult(result);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleResultRowClick = (result) => handleResultClick(result);\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setActiveResult(null);\r\n  };\r\n\r\n  const handleRetakeTest = () => {\r\n    if (activeResult && onRestart) {\r\n      handleCloseModal();\r\n      // Use questions from the result data\r\n      const resultQuestions = activeResult.questions || [];\r\n      if (resultQuestions.length > 0) {\r\n        onRestart(activeResult.lesson, resultQuestions);\r\n      } else {\r\n        console.warn('No questions found in result data for retake');\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!results || results.length === 0) {\r\n    return (\r\n      <div className=\"min-h-screen bg-slate-50\">\r\n        <div className=\"max-w-4xl mx-auto p-4 sm:p-6\">\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">📊</div>\r\n            <h2 className=\"text-2xl font-semibold mb-4 text-slate-800\">Няма резултати</h2>\r\n            <p className=\"text-slate-600 mb-6 text-lg\">\r\n              Направете първия си тест за да видите резултатите тук\r\n            </p>\r\n            {canRestart && (\r\n              <button \r\n                onClick={onRestart}\r\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n              >\r\n                Направи тест отново\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <div className=\"max-w-6xl mx-auto p-4 sm:p-6\">\r\n        <h1 className=\"text-3xl font-bold text-slate-800 mb-8\">Резултати</h1>\r\n        \r\n        {/* Results List */}\r\n        <div className=\"space-y-4\">\r\n          {results.map(result => {\r\n            const handleClick = () => handleResultClick(result);\r\n            const percentage = Math.round((result.correct / result.total) * 100);\r\n            const date = new Date(result.at).toLocaleDateString('bg-BG', {\r\n              year: 'numeric',\r\n              month: 'short',\r\n              day: 'numeric',\r\n              hour: '2-digit',\r\n              minute: '2-digit'\r\n            });\r\n\r\n            return (\r\n              <div\r\n                key={result.at}\r\n                className=\"bg-white rounded-lg border p-4 hover:bg-slate-50 cursor-pointer transition-colors\"\r\n                onClick={handleClick}\r\n              >\r\n                <div className=\"p-6\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex-1\">\r\n                      <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\r\n                        {result.lesson?.title || result.lesson?.name || 'Урок'}\r\n                      </h3>\r\n                      <p className=\"text-sm text-slate-600 mb-3\">\r\n                        {date} · {result.correct}/{result.total} правилни отговора\r\n                      </p>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"text-sm text-slate-500\">\r\n                          {result.timeLimitMin ? `Време: ${result.timeLimitMin} мин` : 'Без време'}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-right ml-4\">\r\n                      <div className={`text-2xl font-bold ${\r\n                        percentage >= 80 ? 'text-green-600' :\r\n                        percentage >= 60 ? 'text-yellow-600' :\r\n                        'text-red-600'\r\n                      }`}>\r\n                        {percentage}%\r\n                      </div>\r\n                      <div className=\"text-sm text-slate-500\">Резултат</div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Progress Bar */}\r\n                  <div className=\"mt-4\">\r\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\r\n                      <div \r\n                        className={`h-2 rounded-full transition-all duration-300 ${\r\n                          percentage >= 80 ? 'bg-green-500' :\r\n                          percentage >= 60 ? 'bg-yellow-500' :\r\n                          'bg-red-500'\r\n                        }`}\r\n                        style={{ width: `${percentage}%` }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Restart Button */}\r\n        {canRestart && (\r\n          <div className=\"mt-8 text-center\">\r\n            <button\r\n              onClick={onRestart}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\"\r\n            >\r\n              Направи последния тест отново\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Answer Review Modal */}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title=\"Преглед на резултата\"\r\n        size=\"xl\"\r\n      >\r\n        <ResultReview\r\n          result={activeResult}\r\n          onRetakeTest={handleRetakeTest}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { usePoints } from \"../hooks/usePoints\";\r\n\r\nexport default function StatsScreen(props) {\r\n  const { results = [] } = props;\r\n  const { points, level, progressToNextLevel, pointsToNextLevel, progressPercentage, resetPoints } = usePoints();\r\n  \r\n  const totalTests = results.length;\r\n  const totalQuestions = results.reduce((sum, r) => sum + r.total, 0);\r\n  const totalCorrect = results.reduce((sum, r) => sum + r.correct, 0);\r\n  const averageScore = totalQuestions > 0 ? Math.round((totalCorrect / totalQuestions) * 100) : 0;\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <div className=\"max-w-6xl mx-auto p-4 sm:p-6\">\r\n        <h1 className=\"text-3xl font-bold text-slate-800 mb-8\">Статистики</h1>\r\n        \r\n        {/* Points and Level Section */}\r\n        <div className=\"mb-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-xl p-6 text-white shadow-lg\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-4xl font-bold mb-2\">⭐ {points}</div>\r\n              <div className=\"text-lg opacity-90\">Общо точки</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-4xl font-bold mb-2\">{level}</div>\r\n              <div className=\"text-lg opacity-90\">Текущо ниво</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-4xl font-bold mb-2\">{pointsToNextLevel}</div>\r\n              <div className=\"text-lg opacity-90\">До следващото ниво</div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Progress Bar */}\r\n          <div className=\"mt-6\">\r\n            <div className=\"flex justify-between text-sm mb-2\">\r\n              <span>Ниво {level}</span>\r\n              <span>Ниво {level + 1}</span>\r\n            </div>\r\n            <div className=\"w-full bg-white bg-opacity-20 rounded-full h-3\">\r\n              <div \r\n                className=\"bg-white h-3 rounded-full transition-all duration-500 ease-out\"\r\n                style={{ width: `${progressPercentage}%` }}\r\n              />\r\n            </div>\r\n            <div className=\"text-center mt-2 text-sm opacity-90\">\r\n              {`${progressToNextLevel} / 100 точки`}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Reset Button for Testing */}\r\n          <div className=\"mt-4 text-center\">\r\n            <button\r\n              onClick={resetPoints}\r\n              className=\"bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg text-sm transition-all\"\r\n            >\r\n              Нулирай точки (за тестване)\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Test Statistics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n          <div className=\"bg-white rounded-xl p-6 shadow-sm text-center\">\r\n            <div className=\"text-3xl font-bold text-blue-600 mb-2\">{totalTests}</div>\r\n            <div className=\"text-slate-600\">Общо тестове</div>\r\n          </div>\r\n          <div className=\"bg-white rounded-xl p-6 shadow-sm text-center\">\r\n            <div className=\"text-3xl font-bold text-green-600 mb-2\">{totalQuestions}</div>\r\n            <div className=\"text-slate-600\">Общо въпроси</div>\r\n          </div>\r\n          <div className=\"bg-white rounded-xl p-6 shadow-sm text-center\">\r\n            <div className=\"text-3xl font-bold text-purple-600 mb-2\">{totalCorrect}</div>\r\n            <div className=\"text-slate-600\">Правилни отговори</div>\r\n          </div>\r\n          <div className=\"bg-white rounded-xl p-6 shadow-sm text-center\">\r\n            <div className=\"text-3xl font-bold text-orange-600 mb-2\">{averageScore}%</div>\r\n            <div className=\"text-slate-600\">Среден резултат</div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Results */}\r\n        {results.length > 0 ? (\r\n          <div className=\"bg-white rounded-xl shadow-sm\">\r\n            <div className=\"p-6 border-b border-slate-200\">\r\n              <h2 className=\"text-xl font-semibold text-slate-800\">Последни резултати</h2>\r\n            </div>\r\n            <div className=\"divide-y divide-slate-200\">\r\n              {results.slice(0, 10).map((result, index) => {\r\n                const lessonTitle = result.lesson?.title || result.lesson?.name || 'Урок';\r\n                const date = new Date(result.at).toLocaleDateString('bg-BG');\r\n                const percentage = Math.round((result.correct / result.total) * 100);\r\n                const points = result.correct * 10;\r\n                \r\n                return (\r\n                  <div key={index} className=\"p-6\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <h3 className=\"font-semibold text-slate-800\">\r\n                          {lessonTitle}\r\n                        </h3>\r\n                        <p className=\"text-sm text-slate-600\">\r\n                          {date} · {result.correct}/{result.total} правилни\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-lg font-bold text-slate-800\">\r\n                          {percentage}%\r\n                        </div>\r\n                        <div className=\"text-sm text-slate-500\">\r\n                          +{points} точки\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-white rounded-xl p-12 text-center shadow-sm\">\r\n            <div className=\"text-6xl mb-4\">📊</div>\r\n            <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Няма резултати</h3>\r\n            <p className=\"text-slate-600\">\r\n              Направете първия си тест за да видите статистиките тук\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useMemo, useState } from \"react\";\r\nimport { groupBy, normalizeId } from \"../utils\";\r\n\r\nfunction SimpleTabs({ defaultValue, tabs }){\r\n  const [val, setVal] = useState(defaultValue || (tabs[0] && tabs[0].value));\r\n  \r\n  const handleTabClick = (tabValue) => setVal(tabValue);\r\n  const handleStartQuizClick = (lesson, qs) => handleStartQuiz(lesson, qs);\r\n  \r\n  return (<div>\r\n    <div className=\"grid grid-cols-2 w-full gap-2\">\r\n      {tabs.map(t => {\r\n        const handleClick = () => handleTabClick(t.value);\r\n        return (\r\n          <button\r\n            type=\"button\"\r\n            key={t.value}\r\n            onClick={handleClick}\r\n            className={`btn ${val === t.value ? 'bg-blue-50 border-blue-300' : ''}`}\r\n          >\r\n            {t.label}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n    <div className=\"pt-4\">{tabs.find(t => t.value === val)?.content}</div>\r\n  </div>);\r\n}\r\n\r\nexport default function TestsScreen({ profile, lessons, classes, questions, onStartQuiz }){\r\n  const [questionCounts, setQuestionCounts] = useState({});\r\n  \r\n  const lessonsByClass = useMemo(() => {\r\n    const grouped = {};\r\n    lessons.forEach(lesson => {\r\n      const classId = normalizeId(lesson.class_id || lesson.classId);\r\n      if (classId) {\r\n        if (!grouped[classId]) grouped[classId] = [];\r\n        grouped[classId].push(lesson);\r\n      }\r\n    });\r\n    return grouped;\r\n  }, [lessons]);\r\n  \r\n  const classList = useMemo(() => {\r\n    return classes.map(c => {\r\n      const id = normalizeId(c.id) || c.name;\r\n      const name = c.name || c.title || c.id;\r\n      return { id, name };\r\n    });\r\n  }, [classes]);\r\n  const currentClassId = profile?.classId;\r\n  const currentLessons = lessonsByClass[currentClassId] || [];\r\n  \r\n  function listQuestionsForLesson(lessonId){ const lid=normalizeId(lessonId); return questions.filter(q=> normalizeId(q.lesson_id||q.lessonId||q.lesson)===lid); }\r\n  \r\n  const handleQuestionCountChange = (lessonId, value) => {\r\n    setQuestionCounts(prev => ({\r\n      ...prev,\r\n      [lessonId]: value === 'all' ? null : parseInt(value)\r\n    }));\r\n  };\r\n  \r\n  const handleStartQuiz = (lesson, allQuestions) => {\r\n    const lessonId = lesson.id || lesson.lesson_id;\r\n    const selectedCount = questionCounts[lessonId] || allQuestions.length;\r\n    \r\n    let limitedQs = allQuestions;\r\n    if (selectedCount < allQuestions.length) {\r\n      const shuffleFunction = () => Math.random() - 0.5;\r\n      const shuffled = [...allQuestions].sort(shuffleFunction);\r\n      limitedQs = shuffled.slice(0, selectedCount);\r\n    }\r\n    \r\n    onStartQuiz(lesson, limitedQs);\r\n  };\r\n  \r\n  function renderLessonCard(lesson, isCurrentClass = false) {\r\n    const qs = listQuestionsForLesson(lesson.id);\r\n    const lessonId = normalizeId(lesson.id);\r\n    const currentCount = questionCounts[lessonId] || qs.length;\r\n    \r\n    const handleStartClick = () => handleStartQuiz(lesson, qs);\r\n    const handleCountChange = (e) => handleQuestionCountChange(lessonId, parseInt(e.target.value));\r\n    \r\n    if (!qs.length) {\r\n      return (\r\n        <div key={lessonId} className=\"card hover:shadow-md transition\">\r\n          <div className=\"card-content flex items-center justify-between\">\r\n            <div>\r\n              <div className=\"font-medium\">{lesson.title || lesson.name}</div>\r\n              <div className=\"text-xs text-slate-500\">Няма въпроси</div>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary\" disabled>Старт</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div key={lessonId} className=\"card hover:shadow-md transition\">\r\n        <div className=\"card-content\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <div className=\"font-medium\">{lesson.title || lesson.name}</div>\r\n            <button \r\n              type=\"button\" \r\n              className=\"btn btn-primary\" \r\n              onClick={handleStartClick}\r\n              disabled={!qs.length}\r\n            >\r\n              Старт\r\n            </button>\r\n          </div>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"text-xs text-slate-500\">\r\n              Въпроси: {currentCount} / {qs.length}\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <label className=\"text-xs text-slate-600\">Брой:</label>\r\n              <select\r\n                value={currentCount}\r\n                onChange={handleCountChange}\r\n                className=\"text-xs border border-slate-300 rounded px-2 py-1 bg-white\"\r\n              >\r\n                {qs.length <= 5 ? (\r\n                  Array.from({ length: qs.length }, (unused, i) => i + 1).map(count => {\r\n                    return <option key={count} value={count}>{count}</option>;\r\n                  })\r\n                ) : (\r\n                  // If more than 5 questions, show common options + \"All\"\r\n                  <>\r\n                    <option value={qs.length}>Всички ({qs.length})</option>\r\n                    <option value={5}>5</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={15}>15</option>\r\n                    <option value={20}>20</option>\r\n                    {qs.length > 25 && <option value={25}>25</option>}\r\n                    {qs.length > 30 && <option value={30}>30</option>}\r\n                  </>\r\n                )}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (<div className=\"max-w-4xl mx-auto p-4\">\r\n    <SimpleTabs defaultValue=\"by-lesson\" tabs={[\r\n      {value:'by-lesson', label:'По тема / уроци', content:(\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold mb-3\">\r\n            {`Уроци за ${classList.find(c => c.id === currentClassId)?.name || \"избрания клас\"}`}\r\n          </h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n            {currentLessons.map(l => {\r\n              return renderLessonCard(l, true);\r\n            })}\r\n          </div>\r\n        </div>\r\n      )},\r\n      {value:'by-class', label:'По класове', content:(\r\n        <div className=\"space-y-4\">{classList.map(cls => {\r\n          return (\r\n            <div key={cls.id}>\r\n              <div className=\"text-sm font-semibold mb-2\">{cls.name}</div>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n                {(lessonsByClass[cls.id]||[]).map(l => {\r\n                  return renderLessonCard(l);\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}</div>\r\n      )}\r\n    ]}/>\r\n  </div>);\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function SettingsModal({ isOpen, onClose, settings, onSave }) {\r\n  const [localSettings, setLocalSettings] = useState(settings);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const handleSave = () => {\r\n    onSave(localSettings);\r\n    onClose();\r\n  };\r\n  \r\n  const handleResetProfile = () => {\r\n    if (window.confirm('Сигурни ли сте, че искате да нулирате профила? Това ще изтрие всички данни.')) {\r\n      onResetProfile();\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleShowExplanationChange = (e) => setLocalSettings(s => ({...s, showExplanation: e.target.checked}));\r\n  const handleShuffleQuestionsChange = (e) => setLocalSettings(s => ({...s, shuffleQuestions: e.target.checked}));\r\n  const handleShuffleOptionsChange = (e) => setLocalSettings(s => ({...s, shuffleOptions: e.target.checked}));\r\n  const handleInstantNextChange = (e) => setLocalSettings(s => ({...s, instantNext: e.target.checked}));\r\n  const handleInstantDelayChange = (e) => setLocalSettings(s => ({...s, instantDelaySec: Number(e.target.value)}));\r\n\r\n  return (\r\n    <div className=\"modal-backdrop\" onClick={onClose}>\r\n      <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n        <h2 className=\"text-xl font-semibold mb-4\">Настройки</h2>\r\n\r\n        <div className=\"space-y-4\">\r\n          <label className=\"flex items-center gap-3\">\r\n            <input type=\"checkbox\" checked={localSettings.showExplanation}\r\n              onChange={handleShowExplanationChange} />\r\n            <span>Показвай обяснения след отговор</span>\r\n          </label>\r\n\r\n          <label className=\"flex items-center gap-3\">\r\n            <input type=\"checkbox\" checked={localSettings.shuffleQuestions}\r\n              onChange={handleShuffleQuestionsChange} />\r\n            <span>Разбърквай въпроси</span>\r\n          </label>\r\n\r\n          <label className=\"flex items-center gap-3\">\r\n            <input type=\"checkbox\" checked={localSettings.shuffleOptions}\r\n              onChange={handleShuffleOptionsChange} />\r\n            <span>Разбърквай отговори</span>\r\n          </label>\r\n\r\n          <label className=\"flex items-center gap-3\">\r\n            <input type=\"checkbox\" checked={localSettings.instantNext}\r\n              onChange={handleInstantNextChange} />\r\n            <span>Автоматично следващ въпрос</span>\r\n          </label>\r\n\r\n          {localSettings.instantNext && (\r\n            <div className=\"pl-8\">\r\n              <label className=\"flex items-center gap-3\">\r\n                <span>Забавяне (секунди):</span>\r\n                <input type=\"number\" min=\"1\" max=\"10\" value={localSettings.instantDelaySec}\r\n                  onChange={handleInstantDelayChange}\r\n                  className=\"w-16 border rounded px-2 py-1\" />\r\n              </label>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"pt-4 flex justify-end gap-2\">\r\n            <button type=\"button\" className=\"btn\" onClick={onClose}>Отказ</button>\r\n            <button type=\"button\" className=\"btn btn-primary\"\r\n              onClick={handleSave}>Запази</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import Papa from \"papaparse\";\r\n\r\nexport async function fetchCSV(url) {\r\n  console.log('fetchCSV called with URL:', url);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse(url, {\r\n      download: true,\r\n      header: true,\r\n      skipEmptyLines: true,\r\n      transformHeader: (header) => header.trim(), // Trim whitespace from headers\r\n      complete: (res) => {\r\n        console.log('Papa.parse complete for URL:', url);\r\n        console.log('Result:', res);\r\n        console.log('Data length:', res.data?.length);\r\n        console.log('Errors:', res.errors);\r\n        console.log('Meta:', res.meta);\r\n        console.log('First row:', res.data?.[0]);\r\n        console.log('Column names:', res.meta?.fields);\r\n        \r\n        if (res.errors && res.errors.length > 0) {\r\n          console.error('CSV parsing errors:', res.errors);\r\n          reject(res.errors[0]);\r\n        } else if (!res.data || res.data.length === 0) {\r\n          console.error('CSV returned no data');\r\n          reject(new Error('CSV returned no data'));\r\n        } else {\r\n          resolve(res.data);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Papa.parse error for URL:', url, err);\r\n        reject(err);\r\n      },\r\n    });\r\n  });\r\n}","import { useEffect, useState } from \"react\";\r\nimport { fetchCSV } from \"./fetchCsv\";\r\nimport { SHEETS } from \"../constants\";\r\n\r\nexport function useSheetsData() {\r\n  const [data, setData] = useState({ classes: [], subjects: [], lessons: [], questions: [], theory: [] });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    (async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        console.log('Starting to fetch theory data from:', SHEETS.theory);\r\n        \r\n        const [classes, subjects, lessons, questions, theory] = await Promise.all([\r\n          fetchCSV(SHEETS.classes),\r\n          fetchCSV(SHEETS.subjects),\r\n          fetchCSV(SHEETS.lessons),\r\n          fetchCSV(SHEETS.questions),\r\n          fetchCSV(SHEETS.theory),\r\n        ]);\r\n        \r\n        // Transform theory data to match expected property names\r\n        const transformedTheory = theory.map(item => {\r\n          const classId = item.class_id ? Number(item.class_id) : undefined;\r\n          const lessonId = item.lesson_id ? String(item.lesson_id) : undefined;\r\n          \r\n          return {\r\n            id: item.id,\r\n            classId,\r\n            lessonId,\r\n            title: item.title,\r\n            content: item.content,\r\n            image: item.image\r\n          };\r\n        });\r\n        \r\n        console.log('Theory data loaded:', theory);\r\n        console.log('Transformed theory data:', transformedTheory);\r\n        console.log('Theory data length:', theory?.length);\r\n        console.log('Theory data type:', typeof theory);\r\n        console.log('Theory data structure:', theory?.[0]);\r\n        console.log('All data keys:', Object.keys({ classes, subjects, lessons, questions, theory }));\r\n        \r\n        if (!cancelled) setData({ classes, subjects, lessons, questions, theory: transformedTheory });\r\n      } catch (e) {\r\n        if (!cancelled) {\r\n          console.error('Error loading sheets data:', e);\r\n          console.error('Full error object:', e);\r\n          setError(e?.message || \"Грешка при зареждане на данните\");\r\n        }\r\n      } finally {\r\n        if (!cancelled) setLoading(false);\r\n      }\r\n    })();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, []);\r\n\r\n  return { ...data, loading, error };\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport HeaderBar from \"./components/HeaderBar\";\r\nimport Onboarding from \"./components/Onboarding\";\r\nimport Quiz from \"./components/Quiz\";\r\nimport HomeScreen from \"./components/HomeScreen\";\r\nimport TheoryScreen from \"./components/TheoryScreen\";\r\nimport ResultsScreen from \"./components/ResultsScreen\";\r\nimport StatsScreen from \"./components/StatsScreen\";\r\nimport TestsScreen from \"./components/TestsScreen\";\r\nimport SettingsModal from \"./components/SettingsModal\";\r\nimport { routeTitle } from \"./utils\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nimport { STORAGE_KEYS } from \"./constants\";\r\nimport { useSheetsData } from \"./api/useSheetsData\";\r\n\r\nexport default function MathApp(){\r\n  const { classes, subjects, lessons, questions, theory, loading, error } = useSheetsData();\r\n  const [profile,setProfile] = useLocalStorage(STORAGE_KEYS.profile, null);\r\n  const [results,setResults] = useLocalStorage(STORAGE_KEYS.results, []);\r\n  const [route,setRoute] = useState(\"home\");\r\n  const [activeQuiz,setActiveQuiz] = useState(null);\r\n  const [settingsOpen,setSettingsOpen] = useState(false);\r\n  const [lastQuiz,setLastQuiz] = useState(null);\r\n  const [settings,setSettings] = useLocalStorage(STORAGE_KEYS.settings, { showExplanation:true, shuffleQuestions:true, shuffleOptions:true, timeLimitMin:8, instantNext:false, instantDelaySec:4 });\r\n\r\n  useEffect(()=>{ if(!profile && !loading) setRoute(\"onboarding\"); },[profile,loading]);\r\n\r\n  function handleFinishQuiz(summary){ \r\n    setResults([summary,...results]); \r\n    setLastQuiz({ lesson: summary.lesson, questions: summary.questions || [] }); \r\n    setActiveQuiz(null); \r\n    setRoute(\"results\"); \r\n  }\r\n  \r\n  function handleRetakeTest(lesson, questions) {\r\n    setActiveQuiz({ lesson, questions });\r\n    setRoute(\"quiz\");\r\n  }\r\n  function resetProfile(){ setProfile(null); setRoute(\"onboarding\"); }\r\n\r\n  const handleTheoryStartQuiz = (lesson, questions) => setActiveQuiz({ lesson, questions });\r\n  const handleTestsStartQuiz = (lesson, qs) => setActiveQuiz({ lesson, questions: qs });\r\n  const handleResultsRestart = () => lastQuiz && handleRetakeTest(lastQuiz.lesson, lastQuiz.questions);\r\n  const handleQuizHome = () => setActiveQuiz(null);\r\n  const handleRouteHome = () => setRoute(\"home\");\r\n  const handleOpenSettings = () => setSettingsOpen(true);\r\n  const handleOnboardingDone = (p) => { setProfile(p); setRoute(\"home\"); };\r\n  const handleReload = () => location.reload();\r\n  const handleCloseSettings = () => setSettingsOpen(false);\r\n  \r\n  if (route===\"onboarding\" || !profile) return <Onboarding classes={classes} onDone={handleOnboardingDone} />;\r\n  if (activeQuiz) return (<div className=\"min-h-screen bg-slate-50\">\r\n    <HeaderBar title=\"Тест\" profile={profile} onHome={handleQuizHome} onLogout={resetProfile} onOpenSettings={handleOpenSettings} />\r\n    <Quiz lesson={activeQuiz.lesson} questions={activeQuiz.questions} onFinish={handleFinishQuiz} settings={settings} />\r\n  </div>);\r\n  if (route===\"quiz\" && activeQuiz) return (<div className=\"min-h-screen bg-slate-50\">\r\n    <HeaderBar title=\"Тест\" profile={profile} onHome={handleRouteHome} onLogout={resetProfile} onOpenSettings={handleOpenSettings} />\r\n    <Quiz lesson={activeQuiz.lesson} questions={activeQuiz.questions} onFinish={handleFinishQuiz} settings={settings} />\r\n  </div>);\r\n\r\n  if (loading) return (<div className=\"min-h-screen grid place-items-center\"><div className=\"text-center\"><div className=\"animate-pulse text-2xl font-semibold\">Зареждаме данните…</div><div className=\"text-sm text-slate-500 mt-2\">Google Sheets CSV</div></div></div>);\r\n  if (error) return (<div className=\"min-h-screen grid place-items-center p-6\"><div className=\"max-w-md text-center\"><div className=\"text-xl font-semibold mb-2\">Възникна грешка</div><div className=\"text-slate-600 mb-4\">{String(error)}</div><button type=\"button\" className=\"btn\" onClick={handleReload}>\r\n           Презареди\r\n         </button></div></div>);\r\n\r\n  return (<div className=\"min-h-screen\">\r\n    <HeaderBar title={routeTitle(route)} profile={profile} onHome={handleRouteHome} onLogout={resetProfile} onOpenSettings={handleOpenSettings} />\r\n    {route===\"home\" && <HomeScreen onGo={setRoute} profile={profile} />}\r\n    {route===\"theory\" && <TheoryScreen profile={profile} theory={theory} classes={classes} lessons={lessons} questions={questions} onStartQuiz={handleTheoryStartQuiz} />}\r\n    {route===\"tests\" && (<TestsScreen profile={profile} lessons={lessons} classes={classes} questions={questions} onStartQuiz={handleTestsStartQuiz} />)}\r\n    {route===\"results\" && (<ResultsScreen results={results} classes={classes} lessons={lessons} questions={questions} canRestart={!!lastQuiz} onRestart={handleResultsRestart} />)}\r\n    {route===\"stats\" && <StatsScreen results={results} />}\r\n    {settingsOpen && (\r\n      <SettingsModal \r\n        isOpen={settingsOpen}\r\n        onClose={handleCloseSettings}\r\n        settings={settings}\r\n        onSave={setSettings}\r\n      />\r\n    )}\r\n  </div>);\r\n}\r\n","import './index.css'\r\nimport React from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\nimport App from './App.jsx'\r\n\r\ncreateRoot(document.getElementById('root')).render(<App />)\r\n"],"names":["require$$0","m","jsxRuntimeModule","useState","useEffect","useCallback","jsxs","jsx","useRef","useMemo","q","options","opts","total","l","createPortal","points","handleStartQuiz","Fragment","questions","p","App"],"mappings":"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","x_google_ignoreList":[0,1,2]}